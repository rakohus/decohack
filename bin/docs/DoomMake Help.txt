==============================================================================
============                       DoomMake                       ============
==============================================================================

DoomMake is the maker tool that can build whole projects as well as bits and 
pieces of a project, and serves as the primary entry point for using the
DoomTools as a full toolchain for building Doom projects.  

DoomMake operates on "targets," which are the entry points in a DoomMake
script file (DoomMake's scripts are an implementation of RookScript/WadScript,
and the documentation is provided in this distribution as "WadScript Help.txt"
and "RookScript Quick Guide.md").

Each entry point receives one argument: the list of additional command-line 
arguments passed to the script, if any.

DoomMake automatically loads two properties files to Java's system properties
so that is accessible from the "properties()" built-in function. 

The project properties file is "doommake.project.properties".

The default property override file is "doommake.properties", unless 
overridden.

==============================================================================
===== Command Line
==============================================================================

Usage: doommake [target] [args] [switches]
                [directory] --new-project [templates...]
                [--list-templates | -t]
                [--help | -h | --version]
                [--function-help | --function-help-markdown]

[target]:
    The target entry point to execute. Default is "make".

[args]:
    The additional arguments to pass along to the script.

[templates]:
    The names of the template(s) to use or combine for the new 
    project (applied altogether).
    E.g.: --new-project maps git
        Combines the "maps", and "git" templates together.

[directory]:
    The directory/name for the new project.

[switches]:
    --help, -h                     Prints this help.
    --version                      Prints the version of this utility.
    --function-help                Prints all available function usages.
    --function-help-markdown       Prints all available function usages in
                                       Markdown format.
    --list-templates, -t           Lists all available project templates.

-----------------------------------------------------------------------------

    --new-project, -n [templates]  Creates a new project made up of a set of
                                      templates (requires [directory]).

-----------------------------------------------------------------------------

    --script, -s [filename]        Use [filename] for the root build script.
                                       Default is "doommake.script".
    --properties, -p [filename]    Use [filename] for the project properties.
                                       Default is "doommake.properties".

    --runaway-limit [num]          Sets the runaway limit (in operations)
                                       before the soft protection on infinite
                                       loops triggers. 0 is no limit.
                                       Default: 0
    --activation-depth [num]       Sets the activation depth to [num].
                                       Default: 256
    --stack-depth [num]            Sets the stack value depth to [num].
                                       Default: 2048


==============================================================================
===== Script Commands
==============================================================================

See WadScript Command reference (WadScript Help.txt), plus the following:


==============================================================================
==== DoomMake Functions
==============================================================================

CLEANDIR(path, deleteTop)
    Recursively deletes all files and directories inside a target directory.
    path:
        (STRING) Path to directory.
        (OBJECTREF:File) Path to directory.
    deleteTop:
        (BOOLEAN) If true, also delete the provided directory as well.
    Returns:
        (NULL) If [path] is null.
        (BOOLEAN) True if the directory existed and was cleaned, false otherwise.
        (ERROR:Security) If the OS is preventing the read.

COPYFILE(srcFile, destFile, createDirs)
    Copies a file from one path to another, optionally creating directories 
    for it. If the destination file exists, it is overwritten.
    srcFile:
        (STRING) Path to source file.
        (OBJECTREF:File) Path to source file.
    destFile:
        (STRING) Path to destination file.
        (OBJECTREF:File) Path to destination file.
    createDirs:
        (BOOLEAN) If true, create the directories for the destination, if not made.
    Returns:
        (NULL) If either file is null.
        (OBJECTREF:File) The created destination file.
        (ERROR:BadFile) If the source file does not exist.
        (ERROR:IOError) If a read or write error occurs.
        (ERROR:Security) If the OS is preventing the read or write.

COPYDIR(srcDir, destDir, recursive, regex)
    Copies a series of files from one directory to another, replicating the 
    tree in the destination. If the destination file exists, it is overwritten.
    srcDir:
        (STRING) Path to source directory (base path).
        (OBJECTREF:File) Path to source directory (base path).
    destDir:
        (STRING) Path to destination directory.
        (OBJECTREF:File) Path to destination directory.
    recursive:
        (BOOLEAN) If true, scan recursively.
    regex:
        (NULL) Include everything.
        (STRING) The pattern to match each file path against for inclusion. If matched, include.
    Returns:
        (NULL) If either file is null.
        (LIST:[OBJECTREF:File, ...]) The list of copied/created files (destination).
        (ERROR:BadFile) If the source or destination directory does not exist.
        (ERROR:BadPattern) If the input RegEx pattern is malformed.
        (ERROR:IOError) If a read or write error occurs.
        (ERROR:Security) If the OS is preventing the read or write.

ZIPFILES(zipfile, files, append, compressed)
    Compresses a series of files into an archive, NOT preserving directory 
    trees. If the destination file exists, it is overwritten.
    zipfile:
        (STRING) Path to target zip file.
        (OBJECTREF:File) Path to target zip file.
    files:
        (LIST:[STRING, ...]) Paths to files to add.
        (LIST:[OBJECTREF:File, ...]) Paths to files to add.
    append:
        (NULL) Default: False.
        (BOOLEAN) True to append to an existing Zip file, false to overwrite.
    compressed:
        (NULL) Default: True.
        (BOOLEAN) True to compress, false to not compress.
    Returns:
        (NULL) If [zipfile] is null.
        (STRING) The path to the created file, if [zipfile] is a STRING.
        (OBJECTREF:File) The path to the created file, if [zipfile] is an OBJECTREF:File.
        (ERROR:BadFile) If a source file cannot be opened.
        (ERROR:IOError) If a read or write error occurs.
        (ERROR:Security) If the OS is preventing the read or write.

ZIPDIR(zipfile, directory, prefix, append, regex, compressed)
    Compresses a series of files into an archive from a directory, preserving 
    directory trees. Always recurses directory structure. If the destination 
    file exists, it is overwritten, unless [append] is true.
    zipfile:
        (STRING) Path to source directory (base path).
        (OBJECTREF:File) Path to source directory (base path).
    directory:
        (OBJECTREF:File) Path to source directory.
    prefix:
        (NULL) No prefix.
        (STRING) The string to prefix all new entries with.
    append:
        (NULL) Default: False.
        (BOOLEAN) True to append to an existing Zip file, false to overwrite.
    regex:
        (NULL) Include everything.
        (STRING) The pattern to match each file path against for inclusion. If matched, include.
    compressed:
        (NULL) Default: True.
        (BOOLEAN) True to compress, false to not compress.
    Returns:
        (NULL) If [zipfile] is null.
        (STRING) The path to the created file, if [zipfile] is a STRING.
        (OBJECTREF:File) The path to the created file, if [zipfile] is an OBJECTREF:File.
        (ERROR:BadFile) If a source file cannot be opened.
        (ERROR:IOError) If a read or write error occurs.
        (ERROR:Security) If the OS is preventing the read or write.

FETCH(url, destFile, createDirs, timeoutMillis)
    Fetches a file from a URL and writes it to a destination file.
    url:
        (STRING) URL path.
        (OBJECTREF:URL) URL path.
    destFile:
        (STRING) Path to destination file.
        (OBJECTREF:File) Path to destination file.
    createDirs:
        (BOOLEAN) If true, create the directories for the destination, if not made.
    timeoutMillis:
        (NULL) Use 5000 ms.
        (INTEGER) Timeout in milliseconds.
    Returns:
        (NULL) If the URL or the destination file is null.
        (OBJECTREF:File) The downloaded file.
        (ERROR:BadURL) If the provided URL is malformed.
        (ERROR:Timeout) If the connection timed out.
        (ERROR:IOError) If the connection could not be opened.
        (ERROR:Security) If the OS is preventing the read or write.

UNZIP(zipFile, destDir, entries)
    Unzips a Zip archive to a target directory, preserving directory structure.
    zipFile:
        (STRING) Zip file path.
        (OBJECTREF:File) Zip file path.
    destDir:
        (STRING) Path to destination directory.
        (OBJECTREF:File) Path to destination directory.
    entries:
        (NULL) All entries.
        (LIST:[STRING, ...]) If provided, the list of entries to unzip.
    Returns:
        (NULL) If the zip file or the destination directory is null.
        (LIST:[OBJECTREF:File, ...]) The list of created files.
        (ERROR:BadFile) If the provided destination is not a directory.
        (ERROR:BadZip) If the provided file is not a zip file.
        (ERROR:IOError) If a read or write error occurs.
        (ERROR:Security) If the OS is preventing the read or write.

HASHDIR(path, recursive, algorithm)
    Hashes file information in a directory. No data content is hashed, just 
    file paths, length, and modified date.
    path:
        (STRING) Directory path.
        (OBJECTREF:File) Directory path.
    recursive:
        (BOOLEAN) If true, scan recursively.
    algorithm:
        (NULL) Use "SHA-1".
        (STRING) The name of the hashing algorithm to use.
    Returns:
        (NULL) If the provided directory is null.
        (BUFFER) A buffer containing the resultant hash digest.
        (ERROR:BadPath) If the provided path is not a directory.
        (ERROR:Security) If the OS is preventing file inspection.


==============================================================================
==== Tool Invocation
==============================================================================

TOOL::DOOMTOOLS(options)
    Calls the DoomTools tool. Inherits STDOUT/STDERR of this script unless 
    overridden (see options).
    options:
        (MAP:{
        	stdout:OBJECTREF(OutputStream)
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::DOOMMAKE(options)
    Calls the DoomMake tool. Inherits STDOUT/STDERR/STDIN of this script 
    unless overridden (see options). It is important to note that the instance
    of DoomMake that runs has no inherent link to this instance.
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        stdin:OBJECTREF(InputStream), 
	        targetName:STRING, 
	        propertiesFile:OBJECTREF(File), 
	        scriptFile:OBJECTREF(File), 
	        args:LIST[STRING, ...], 
	        runawayLimit:INTEGER, 
	        activationDepth:INTEGER, 
	        stackDepth:INTEGER
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::DECOHACK(options)
    Calls the DecoHack tool. Inherits STDOUT/STDERR of this script unless 
    overridden (see options). Do not use both [infile] and [infiles] as 
    options. Use one or the other.
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        infile:OBJECTREF(File), 
	        infiles:LIST[OBJECTREF(File), ...], 
	        outfile:OBJECTREF(File), 
	        outcharsetname:STRING, 
	        outputbudget:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::DIMGCONVERT(options)
    Calls the DImgConv tool. Inherits STDOUT/STDERR of this script unless 
    overridden (see options).
    options:
        (MAP:{
            stdout:OBJECTREF(OutputStream), 
            stderr:OBJECTREF(OutputStream), 
            sourcePath:OBJECTREF(File),
            outputPath:OBJECTREF(File), 
            recursive:BOOLEAN, 
            paletteSourcePath:OBJECTREF(File), 
            modeType:STRING (one of 'palettes', 'colormaps', 'graphics', 'flats'), 
            metaInfoFilename:STRING, 
            verbose:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::DMXCONVERT(options)
    Calls the DMXConvert tool. Inherits STDOUT/STDERR of this script unless 
    overridden (see options).
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        files:LIST[STRING, ...], 
	        outputdirectory:OBJECTREF(File), 
	        ffmpegpath:OBJECTREF(File), 
	        onlyffmpeg:BOOLEAN, 
	        onlyjspi:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::WADMERGE(options)
    Calls the WadMerge tool. Inherits STDOUT/STDERR/STDIN of this script 
    unless overridden (see options).
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        stdin:OBJECTREF(InputStream), 
	        inputfile:OBJECTREF(File), 
	        args:LIST[STRING, ...], 
	        usestdin:BOOLEAN, 
	        verbose:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::WADSCRIPT(options)
    Calls the WadScript tool. Inherits STDOUT/STDERR/STDIN of this script 
    unless overridden (see options). It is important to note that the 
    instance of WadScript that runs has no inherent link to this instance.
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        stdin:OBJECTREF(InputStream), 
	        scriptFile:OBJECTREF(File), 
	        entryPointName:STRING, 
	        runawayLimit:INTEGER, 
	        activationDepth:INTEGER, 
	        stackDepth:INTEGER, 
	        args:LIST[STRING, ...]
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::WADTEX(options)
    Calls the WADTex tool. Inherits STDOUT/STDERR of this script unless 
    overridden (see options).
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        sourcefile:OBJECTREF(File), 
	        wadfile:OBJECTREF(File), 
	        additive:BOOLEAN, 
	        exportmode:BOOLEAN, 
	        strife:BOOLEAN, 
	        verbose:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::WSWANTBL(options)
    Calls the WSwAnTbl tool. Inherits STDOUT/STDERR of this script unless 
    overridden (see options).
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        sourcefile:OBJECTREF(File), 
	        wadfile:OBJECTREF(File), 
	        exportmode:BOOLEAN, 
	        verbose:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::WTEXPORT(options)
    Calls the WTEXport tool. Inherits STDOUT/STDERR/STDIN of this script 
    unless overridden (see options).
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        stdin:OBJECTREF(InputStream), 
	        texturewads:LIST[STRING, ...], 
	        basewad:OBJECTREF(File), 
	        outwad:OBJECTREF(File), 
	        additive:BOOLEAN, 
	        nulltexture:STRING, 
	        noanimated:BOOLEAN, 
	        noswitches:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.

TOOL::WTEXSCAN(options)
    Calls the WTexScan tool. Inherits STDOUT/STDERR of this script unless 
    overridden (see options).
    options:
        (MAP:{
	        stdout:OBJECTREF(OutputStream), 
	        stderr:OBJECTREF(OutputStream), 
	        wadfiles:LIST[STRING, ...], 
	        mapsToScan:LIST[STRING, ...], 
	        quiet:BOOLEAN, 
	        outputtextures:BOOLEAN, 
	        outputflats:BOOLEAN, 
	        skipskies:BOOLEAN
        }) Map of options.
    Returns:
        (INTEGER) The normal return of this tool's process.
        (ERROR:BadOptions) If the options map could not be applied.
